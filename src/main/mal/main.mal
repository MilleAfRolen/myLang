#id: "org.mal-lang.webLang"
#version: "1.0.0"

/*
 * Copyright 2020-2022 Foreseeti AB <https://foreseeti.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


category softwareStack {
  
  //funkar information ? vad ska man ta från coreLang?
  asset OperativeSystem {
    | backdoorAccess
  }

    //behöver requests valideras av Webservern? Behöver Users som skickar requests authenticata sig själva? 
  asset WebServer {
    | connect
      -> webpage.access
    | authenticateUser
      -> runtime.getRequest
    | sendMaliciousRequest
      -> runtime.getRequest
    | accessServerScripts
      -> webResource.access
    & access
      -> resource.access
  }

  asset WebPage extends WebResource {
    | attemptLogin
      -> webserver.authenticateUser
    | inspectScripts
      -> webserver.accessServerScripts,      //Gets access and reads scripts available on site
         attemptBrokenAccessControlAttack   //Finds URI path to administration section of website

    | attemptInjectionAttack
      -> webserver.sendMaliciousRequest,    //SQLInject to get access to admin account
         attemptBrokenAccessControlAttack   //Admin account can get access to administration section of website

    & attemptBrokenAccessControlAttack
      -> webserver.access                   //Access administration section
  }

  asset Dbms {
    | create
      -> database.createUserInfo
    | read
      -> database.userInfo
    | update
      -> database.modifyUserInfo
    | delete
  }

  asset Database {
    | createUserInfo
      -> credentials.createCredentials
    | userInfo
      -> credentials.access
    | modifyUserInfo
      -> credentials.compromise
  }

  asset LanguageRuntime {
    | postRequest
      -> dbms.create
    | getRequest
      -> dbms.read
    | putRequest
      -> dbms.update
    | deleteRequest
      -> dbms.delete
  }
}


category Resources {

  asset ProtectedResource extends WebResource {

  }

  asset WebResource {
    | access
  }
}

 category User {
  asset User {
    | phishing
      -> account.compromise
    | loginRequest
      -> webpage.attemptLogin
  }

  asset Account {
    | compromise
      -> resource.access
  }
 }

category Credentials {

  asset Credentials {
    | createCredentials
      -> access
    | compromise
      -> account.compromise
    | access
      -> account.compromise
  }
 }



associations {
  OperativeSystem [os] 1 <-- runs --> 1 [webserver] WebServer
  WebServer [webserver] 1 <-- executes --> * [runtime] LanguageRuntime
  WebServer [webserver] 1 <-- responses --> * [webpage] WebPage
  WebServer [webserver] 1 <-- uses --> * [resource] ProtectedResource
  WebServer [server] 1 <-- uses --> * [webResource] WebResource
  LanguageRuntime [runtime] 1 <-- uses --> * [dbms] Dbms
  Dbms [dbms] 1 <-- queries --> * [database] Database
  Credentials [credentials] 1 <-- authenticates --> 1 [account] Account
  Account [userAccount] * <-- accesses --> * [resource] ProtectedResource
  User [user] 1 <-- has --> * [account] Account
  User [user] * <-- interacts --> * [webpage] WebPage
  Database [database] 1 <-- stores --> * [credentials] Credentials
}
