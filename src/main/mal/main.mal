#id: "org.mal-lang.webLang"
#version: "1.0.0"

/*
 * Copyright 2020-2022 Foreseeti AB <https://foreseeti.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


category softwareStack {
  
 
  asset OperatingSystem {
    
  }

  asset WebServer {
    | connect
      -> webpage.access
    | authenticateUser
      -> runtime.getRequest
    & sendMaliciousRequest
      -> runtime.getRequest
    | accessServerScripts
      -> scripts.access
    | access
      -> resource.access
  }

  asset WebPage {
    | access
      -> attemptLogin,
         attemptBrokenAccessControlAttack

    | attemptLogin
      -> webserver.authenticateUser
    | attemptBrokenAccessControlAttack
      -> inspectScripts,
         attemptInjectionAttack

    E ifScriptsAvailable
      <- webserver.scripts
      -> inspectScripts
    & inspectScripts
      -> webserver.accessServerScripts,       //Gets access and reads scripts available on site
         brokenAccessControlAttack            //Finds URI path to administration section of website

    # inputValidation
      -> webserver.sendMaliciousRequest

    | attemptInjectionAttack
      -> webserver.sendMaliciousRequest,      //SQLInject to get access to admin account
         brokenAccessControlAttack            //Admin account can get access to administration section of website

    E ifCompromisedAccountHasProtectedResource
      <- user.account.resource
      -> brokenAccessControlAttack
    & brokenAccessControlAttack
      -> webserver.access                     //Access administration section
  }

  asset Dbms {
    | create
      -> database.createUserInfo
    | read
      -> database.readUserInfo
    | update
      -> database.modifyUserInfo
    | delete
      -> database.deleteUserInfo
  }

  asset Database {
    | createUserInfo
      -> credentials.createCredentials
    | readUserInfo
      -> credentials.readCredentials
    | modifyUserInfo
      -> credentials.modifyCredentials
    | deleteUserInfo
      -> credentials.removeCredentials
  }

  asset LanguageRuntime {
    | postRequest
      -> dbms.create
    | getRequest
      -> dbms.read
    | putRequest
      -> dbms.update
    | deleteRequest
      -> dbms.delete
  }
}


category Resources {

  asset ProtectedResource extends WebResource {

  }

  asset ScriptResource extends WebResource {

  }

  abstract asset WebResource {
    | access
  }
}

 category User {
  asset User {
    | phishing
      -> account.compromise
    | accountCompromised
      -> webpage.brokenAccessControlAttack
  }

  asset Account {
    | compromise
      -> user.accountCompromised
  }
 }

category Credentials {

  asset Credentials {
    | createCredentials
    | readCredentials
      -> account.compromise
    | removeCredentials
    | modifyCredentials
  }
 }



associations {
  OperatingSystem [os] 1 <-- runs --> * [webserver] WebServer
  WebServer [webserver] 1 <-- executes --> * [runtime] LanguageRuntime
  WebServer [webserver] 1 <-- responds --> * [webpage] WebPage
  WebServer [server] 1 <-- uses --> * [resource] ProtectedResource
  WebServer [webserver] 1 <-- uses --> * [scripts] ScriptResource
  LanguageRuntime [runtime] 1 <-- utilizes --> 1 [dbms] Dbms
  Dbms [dbms] 1 <-- queries --> * [database] Database
  Credentials [credentials] 1 <-- authenticates --> 1 [account] Account
  Account [account] * <-- accesses --> 0..* [resource] ProtectedResource
  User [user] 1 <-- has --> 0..* [account] Account
  User [user] * <-- interacts --> * [webpage] WebPage
  Database [database] 1 <-- stores --> * [credentials] Credentials
}
